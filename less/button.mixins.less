//
// LUI-3
// (C) Jiří Bělský (github.com/wUFr)
// MIT licenced
//


.lui.button when (@lui_button_mixin_enabled = true){
	.this() when (@lui_button_mixin_default_enabled = true){
		box-shadow: none;
		-webkit-appearance: none;
		display: inline-block;
		color: inherit;
		text-decoration: none;
		border-radius: @lui_button_border-radius;
		background: @lui_button_default_bg;

		// WONT SELECT INPUT TEXT WHILE RAGE PRESSING YOUR MOUSE
		.lui.user-select.none();

		// BUTTON tag or empty A
		cursor: pointer;
		border: 0;

		.lui.button.regular();

		&[class*="fa_b"] {
			&:not(.empty):before{
				padding-right: @lui_button_icon_padding;
			}
		}

		&[class*="fa_a"] {
			&:not(.empty):after{
				padding-left: @lui_button_icon_padding;
			}
		}

		// SIZES
		&.hidden,
		&.xs-hidden {
			.lui.button.hidden();
		}

		&.tiny,
		&.xs-tiny {
			.lui.button.tiny();
		}

		&.small,
		&.xs-small {
			.lui.button.small();
		}

		&.regular,
		&.xs-regular {
			.lui.button.regular(); // probably dont need it, but you know...
		}

		&.big,
		&.xs-big {
			.lui.button.big();
		}

		&.huge,
		&.xs-huge {
			.lui.button.huge();
		}

		&.block,
		&.xs-block {
			.lui.button.block();
		}

		// RESPONSIVE
		// each breakpoint is enabled/disabled by GRID configuration file
		// so its easy to turn off styles for unused breakpoints (ex: xxl, xxxl)
		// to save file size of compiled styles
		& when (@grid_sm_enable = true){
			@media (min-width:@grid_sm_start){
				&.sm-hidden {
					.lui.button.hidden();
				}
				&.sm-tiny {
					.lui.button.tiny();
				}
				&.sm-small {
					.lui.button.small();
				}
				&.sm-regular {
					.lui.button.regular();
				}
				&.sm-big {
					.lui.button.big();
				}
				&.sm-huge {
					.lui.button.huge();
				}
				&.sm-block {
					.lui.button.block();
				}
			}
		}

		& when (@grid_md_enable = true){
			@media (min-width:@grid_md_start){
				&.md-hidden {
					.lui.button.hidden();
				}
				&.md-tiny {
					.lui.button.tiny();
				}
				&.md-small {
					.lui.button.small();
				}
				&.md-regular {
					.lui.button.regular();
				}
				&.md-big {
					.lui.button.big();
				}
				&.md-huge {
					.lui.button.huge();
				}
				&.md-block {
					.lui.button.block();
				}
			}
		}

		& when (@grid_lg_enable = true){
			@media (min-width:@grid_lg_start){
				&.lg-hidden {
					.lui.button.hidden();
				}
				&.lg-tiny {
					.lui.button.tiny();
				}
				&.lg-small {
					.lui.button.small();
				}
				&.lg-regular {
					.lui.button.regular();
				}
				&.lg-big {
					.lui.button.big();
				}
				&.lg-huge {
					.lui.button.huge();
				}
				&.lg-block {
					.lui.button.block();
				}
			}
		}

		& when (@grid_xl_enable = true){
			@media (min-width:@grid_xl_start){
				&.xl-hidden {
					.lui.button.hidden();
				}
				&.xl-tiny {
					.lui.button.tiny();
				}
				&.xl-small {
					.lui.button.small();
				}
				&.xl-regular {
					.lui.button.regular();
				}
				&.xl-big {
					.lui.button.big();
				}
				&.xl-huge {
					.lui.button.huge();
				}
				&.xl-block {
					.lui.button.block();
				}
			}
		}

		& when (@grid_xxl_enable = true){
			@media (min-width:@grid_xxl_start){
				&.xxl-hidden {
					.lui.button.hidden();
				}
				&.xxl-tiny {
					.lui.button.tiny();
				}
				&.xxl-small {
					.lui.button.small();
				}
				&.xxl-regular {
					.lui.button.regular();
				}
				&.xxl-big {
					.lui.button.big();
				}
				&.xxl-huge {
					.lui.button.huge();
				}
				&.xxl-block {
					.lui.button.block();
				}
			}
		}

		& when (@grid_xxxl_enable = true){
			@media (min-width:@grid_xxxl_start){
				&.xxxl-hidden {
					.lui.button.hidden();
				}
				&.xxxl-tiny {
					.lui.button.tiny();
				}
				&.xxxl-small {
					.lui.button.small();
				}
				&.xxxl-regular {
					.lui.button.regular();
				}
				&.xxxl-big {
					.lui.button.big();
				}
				&.xxxl-huge {
					.lui.button.huge();
				}
				&.xxxl-block {
					.lui.button.block();
				}
			}
		}

		& when (@grid_print_enable = true){
			@media print {
				&.pnt-hidden {
					.lui.button.hidden();
				}
				&.pnt-tiny {
					.lui.button.tiny();
				}
				&.pnt-small {
					.lui.button.small();
				}
				&.pnt-regular {
					.lui.button.regular();
				}
				&.pnt-big {
					.lui.button.big();
				}
				&.pnt-huge {
					.lui.button.huge();
				}
				&.pnt-block {
					.lui.button.block();
				}
			}
		}
	}

	// SIZES MIXINS
	.hidden(){
		display: none;
	}

	.tiny(){
		display: inline-block;
		margin: 0;
		width: auto;
		padding: @lui_button_tiny_padding;
		font-size: @lui_button_tiny_font-size;
	}

	.small(){
		display: inline-block;
		margin: 0;
		width: auto;
		padding: @lui_button_small_padding;
		font-size: @lui_button_small_font-size;
	}

	.regular(){
		display: inline-block;
		margin: 0;
		width: auto;
		padding: @lui_button_regular_padding;
		font-size: @lui_button_regular_font-size;
	}

	.big(){
		display: inline-block;
		margin: 0;
		width: auto;
		padding: @lui_button_big_padding;
		font-size: @lui_button_big_font-size;
	}

	.huge(){
		display: inline-block;
		margin: 0;
		width: auto;
		padding: @lui_button_huge_padding;
		font-size: @lui_button_huge_font-size;
	}

	.block(){
		display: block;
		margin: 5px 0;
		width: 100%;
		text-align: center;
		padding: @lui_button_block_padding;
		font-size: @lui_button_block_font-size;
	}

	// STATES
	.hover() when (@lui_button_mixin_default_enabled = true){
		background: @lui_button_default_hover_bg;
	}

	.hover-inverted() when (@lui_button_mixin_default_enabled = true){
		background: @lui_button_default_hover_inv_bg;
	}

	.active() when (@lui_button_mixin_default_enabled = true){
		background: @lui_button_default_active_bg;
	}

	.disabled() when (@lui_button_mixin_disabled_enabled = true){
		cursor: default;
		.lui.user-select.none();
		pointer-events: none;

		opacity: 0.5;
	}

	.force-disabled() when (@lui_button_mixin_disabled_enabled = true){
		cursor: default;
		pointer-events: none;
		.lui.user-select.none();
	}

	// PRIMARY
	.primary when (@lui_button_mixin_primary_enabled = true){
		.this(){
			background: @lui_button_primary_bg;
			color: @lui_button_primary_color;
		}

		.hover(){
			background: @lui_button_primary_hover_bg;
		}

		.active(){
			background: @lui_button_primary_active_bg;
		}
	}

	// SECONDARY
	.secondary when (@lui_button_mixin_secondary_enabled = true){
		.this(){
			background: @lui_button_secondary_bg;
			color: @lui_button_secondary_color;
		}

		.hover(){
			background: @lui_button_secondary_hover_bg;
		}

		.active(){
			background: @lui_button_secondary_active_bg;
		}
	}

	// INFO
	.info when (@lui_button_mixin_info_enabled = true){
		.this(){
			background: @lui_button_info_bg;
			color: @lui_button_info_color;
		}

		.hover(){
			background: @lui_button_info_hover_bg;
		}

		.active(){
			background: @lui_button_info_active_bg;
		}
	}

	// CONFIRM
	.success when (@lui_button_mixin_success_enabled = true){
		.this(){
			background: @lui_button_success_bg;
			color: @lui_button_success_color;
		}

		.hover(){
			background: @lui_button_success_hover_bg;
		}

		.active(){
			background: @lui_button_success_active_bg;
		}
	}

	// WARNING
	.warning when (@lui_button_mixin_warning_enabled = true){
		.this(){
			background: @lui_button_warning_bg;
			color: @lui_button_warning_color;
		}

		.hover(){
			background: @lui_button_warning_hover_bg;
		}

		.active(){
			background: @lui_button_warning_active_bg;
		}
	}

	// ERROR
	.error when (@lui_button_mixin_error_enabled = true){
		.this(){
			background: @lui_button_error_bg;
			color: @lui_button_error_color
		}

		.hover(){
			background: @lui_button_error_hover_bg;
		}

		.active(){
			background: @lui_button_error_active_bg;
		}
	}
}